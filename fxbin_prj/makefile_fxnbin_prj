# ------------------------------------------------------------------------------
#                           _      _      _
#              		 __(.)< __(.)> __(.)=
#         	         \___)  \___)  \___)
# ------------------------------------------------------------------------------
# FILENAME : incoming_sample_pipe
#
# AUTHOR : James Topham
#
# DATE : May 2024
#
# DESCRIPTION :
#
#  - this script serves to process new samples
#
# MODULES :
#
#  - set up directory structure
#  - re-align RNAseq BAM to hg19
#  - feature count
#  - re-align WGS BAM to hg19
#  - call SNVs, CNVs, fusions
# ------------------------------------------------------------------------------
#              	            _      _      _
#          	    	 __(.)< __(.)> __(.)=
#          	    	 \___)  \___)  \___)
# ------------------------------------------------------------------------------
# retain intermediate files
.SECONDARY:

# ------------------------------------------------------------------------------
# tools and virtual environments used
# ------------------------------------------------------------------------------
# java 1.8
java = /gsc/software/linux-x86_64/jre1.8.0_66/bin/java

# python 2.7.10
python = /usr/bin/python

# picardtools 2.17.3
picard = /projects/pangen/installs/picardtools/picard.jar

# samtools 1.11
samtools = /projects/pangen/installs/centos7/samtools-1.11/samtools

# BWA 0.7.6a, from GSC
bwa = /gsc/software/linux-x86_64/bwa-0.7.6a/bwa

# ref genome for RNA libs (hs37d5)
ref_RNA = /projects/pangen/analysis/jtopham/data/hs37d5.fa

# ref genome for DNA libs
ref_DNA = /projects/pangen/analysis/jtopham/data/GRCh37-lite.fa
ref_bwa = /projects/pangen/installs/bwa/genome/GRCh37-lite

# bedtools and bedops
bedtools = /projects/pangen/installs/bedtools2/bin
bedops = /projects/pangen/installs/bedops/bin

# GTF file for feature counts (GENCODE19)
gtf_file = /projects/pangen/installs/arriba_v1.2.0/GENCODE19.gtf

# subread
subread = /projects/pangen/installs/subread-1.6.3-Linux-x86_64/bin

# snpEFF
snpEff = /projects/pangen/installs/snpeff/snpEff

# manta
manta = /projects/pangen/installs/manta-1.5.0.centos6_x86_64/bin

# strelka
strelka = /projects/pangen/installs/strelka-2.9.10.centos6_x86_64/bin/

# snp-pileup for generating input for Facets
snp-pileup = /projects/pangen/installs/facets/facets/inst/extcode/snp-pileup

# Rscript
Rscript = /gsc/software/linux-x86_64-centos7/R-3.5.1/bin/Rscript

# star v2.7.3a
star = /projects/pangen/installs/STAR-2.7.3a/bin/Linux_x86_64_static/STAR

# star index for hg19
starindex = /projects/pangen/installs/arriba_v1.2.0/STAR_index_hs37d5_GENCODE19/

# bwa
bwa = /projects/pangen/installs/bwa/bwa/bwa

# arriba v1.2.0
arriba = /projects/pangen/installs/arriba_v1.2.0/arriba

# WGS path list
wgs_paths = /projects/pangen/analysis/jtopham/wgs_paths.tsv

HASH := \#

# ------------------------------------------------------------------------------
# RNAseq BAMs are re-aligned to hg19
# ------------------------------------------------------------------------------
samples/%/rnaseq/gsc.bam :
	BAM=$$(grep $* incoming_libs.tsv | awk '{print $$2}'); \
	mkdir -p samples/$*/external samples/$*/rnaseq; \
	cp $${BAM} samples/$*/external/hg38.bam; \
	${java} -jar ${picard} SamToFastq VALIDATION_STRINGENCY=LENIENT \
	I=samples/$*/external/hg38.bam F=samples/$*/rnaseq/1.fastq \
	F2=samples/$*/rnaseq/2.fastq; \
	${star} --runThreadN 2 --genomeDir ${starindex} \
	--outFileNamePrefix samples/$*/rnaseq/ --sjdbGTFfile ${gtf_file} \
	--readFilesIn samples/$*/rnaseq/1.fastq samples/$*/rnaseq/2.fastq \
	--outSAMunmapped Within KeepPairs --chimSegmentMin 20 \
	--outSAMmultNmax 1 --outSAMstrandField intronMotif \
	--outFilterIntronMotifs RemoveNoncanonical \
	--outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 155437204704; \
	rm -rf samples/$*/rnaseq/_STAR* samples/$*/rnaseq/*.fastq; \
	${java} -jar ${picard} MarkDuplicates O=$@ \
	I=samples/$*/rnaseq/Aligned.sortedByCoord.out.bam \
	M=samples/$*/rnaseq/markdupe.log ASSUME_SORTED=true \
	VALIDATION_STRINGENCY=LENIENT; \
	rm samples/$*/rnaseq/Aligned.sortedByCoord.out.bam; \
	${samtools} index -@ 2 $@ samples/$*/rnaseq/gsc.bam.bai

# ------------------------------------------------------------------------------
# gather BAM statistics
# ------------------------------------------------------------------------------
samples/%/rnaseq/flagstat.txt: samples/%/rnaseq/gsc.bam
	${samtools} flagstat -@ 2 samples/$*/rnaseq/gsc.bam > $@

# ------------------------------------------------------------------------------
# generate feature counts using SUBREAD
# ------------------------------------------------------------------------------
samples/%/rnaseq/feature_counts2.tsv : samples/%/rnaseq/flagstat.txt
	${subread}/featureCounts -T 2 -s 1 -C -t 'gene' -a ${gtf_file} -o $@ \
	samples/$*/rnaseq/gsc.bam

# ------------------------------------------------------------------------------
# SV
# ------------------------------------------------------------------------------
samples/%/sv/fusions.tsv : samples/%/rnaseq/feature_counts2.tsv
	mkdir -p samples/$*/sv; \
	# extract FASTQs
	${java} -jar ${picard} SamToFastq VALIDATION_STRINGENCY=LENIENT \
	INPUT=samples/$*/rnaseq/gsc.bam F=samples/$*/rnaseq/1.fastq \
	F2=samples/$*/rnaseq/2.fastq; \
	# STAR alignment
	${star} --runThreadN 2 --genomeDir ${starindex} \
	--outFileNamePrefix /projects/pangen/analysis/jtopham/samples/$*/sv/ \
	--readFilesIn samples/$*/rnaseq/1.fastq samples/$*/rnaseq/2.fastq \
	--genomeLoad NoSharedMemory --outStd BAM_Unsorted \
	--outSAMtype BAM Unsorted --outSAMunmapped Within \
	--outBAMcompression 0 --outFilterMultimapNmax 1 \
	--outFilterMismatchNmax 3 \
	--chimSegmentMin 10 --chimOutType WithinBAM SoftClip \
	--chimJunctionOverhangMin 10 --chimScoreMin 1 --chimScoreDropMax 30 \
	--chimScoreJunctionNonGTAG 0 --chimScoreSeparation 1 \
	--alignSJstitchMismatchNmax 5 -1 5 5 --chimSegmentReadGapMax 3 | \
	# arriba
	${arriba} -x /dev/stdin -o samples/$*/sv/fusions.tsv \
	-O samples/$*/sv/fusions.discarded.tsv \
	-a /projects/pangen/installs/arriba_v1.2.0/hs37d5.fa \
	-g /projects/pangen/installs/arriba_v1.2.0/GENCODE19.gtf \
	-b /projects/pangen/installs/arriba_v1.2.0/database/blacklist_hg19_hs37d5_GRCh37_2018-11-04.tsv.gz \
	-T -P; \
	# clean-up
	rm samples/$*/rnaseq/1.fastq samples/$*/rnaseq/2.fastq

# ------------------------------------------------------------------------------
# CNV
# ------------------------------------------------------------------------------
# snppileup - prior to running facets
samples/%/cnv/snpcounts.csv.gz : samples/%/sv/fusions.tsv
	mkdir -p samples/$*/cnv; \
	PT=$$(echo "$*" | awk '{gsub("_.*", "");print}'); \
	BX=$$(if [[ "$*" =~ "bx2" ]]; then echo "bx2"; \
	elif [[ "$*" =~ "bx3" ]]; then echo "bx3"; \
	elif [[ "$*" =~ "org" ]]; then echo "org"; \
	else echo "bx1"; fi); \
	TUMOR=$$(grep $${PT} wgs_paths.tsv | awk -v b=$${BX} '$$2==b' | cut -f 4); \
	NORMAL=$$(grep $${PT} wgs_paths.tsv | awk '$$2=="normal"' | cut -f 4); \
	${snp-pileup} -g -q15 -Q20 -P100 -r25,0 \
	/projects/pangen/installs/facets/00-common_all_hg19.vcf $@ \
	$${NORMAL} $${TUMOR}

# run facets
samples/%/cnv/facets_segs.bed : samples/%/cnv/snpcounts.csv.gz
	${Rscript} scripts/run_facets.R $* > samples/$*/cnv/facets_stdout.txt

# assigns segments to genes
samples/%/cnv/facets_gene.bed : samples/%/cnv/facets_segs.bed
	cat samples/$*/cnv/facets_segs.bed | awk '{gsub("23","X",$$1);print}' | \
	tr ' ' '\t' | ${bedops}/sort-bed --tmpdir ./tmp - > samples/$*/cnv/tmp.bed; \
	${bedtools}/intersectBed -wao -a ./data/refseq_genes_sorted.tsv \
	-b samples/$*/cnv/tmp.bed | sort -k5,5 -k20,20nr | sort -k5,5 -u | \
	${bedops}/sort-bed --tmpdir ./tmp - > $@; \
	rm samples/$*/cnv/tmp.bed

# ------------------------------------------------------------------------------
# call indels with Manta - for input when calling Strelka variants
# ------------------------------------------------------------------------------
samples/%/mutations/manta/results/variants/candidateSmallIndels.vcf.gz: \
samples/%/cnv/facets_gene.bed
	mkdir -p samples/$*/mutations/manta; \
	PT=$$(echo $* | awk '{gsub("_.*", "");print}'); \
	BX=$$(if [[ "$*" =~ "bx2" ]]; then echo "bx2"; \
	elif [[ "$*" =~ "bx3" ]]; then echo "bx3"; \
	elif [[ "$*" =~ "org" ]]; then echo "org"; \
	else echo "bx1"; fi); \
	TUMOR=$$(grep $${PT} wgs_paths.tsv | awk -v b=$${BX} '$$2==b' | cut -f 4); \
	NORM=$$(grep $${PT} wgs_paths.tsv | awk '$$2=="normal"' | cut -f 4); \
	${python} ${manta}/configManta.py --normalBam $${NORM} \
	--tumorBam $${TUMOR} --referenceFasta ${ref_DNA} \
	--runDir samples/$*/mutations/manta; \
	${python} samples/$*/mutations/manta/runWorkflow.py -m local -j 2

# ------------------------------------------------------------------------------
# call Strelka variants with Manta indels as input
# ------------------------------------------------------------------------------
samples/%/mutations/strelka/results/variants/somatic.snvs.vcf.gz: \
samples/%/mutations/manta/results/variants/candidateSmallIndels.vcf.gz
	mkdir -p samples/$*/mutations/strelka; \
	PT=$$(echo "$*" | awk '{gsub("_.*", "");print}'); \
	BX=$$(if [[ "$*" =~ "bx2" ]]; then echo "bx2"; \
	elif [[ "$*" =~ "bx3" ]]; then echo "bx3"; \
	elif [[ "$*" =~ "org" ]]; then echo "org"; \
	else echo "bx1"; fi); \
	TUMOR=$$(grep $${PT} wgs_paths.tsv | awk -v b=$${BX} '$$2==b' | cut -f 4); \
	NORM=$$(grep $${PT} wgs_paths.tsv | awk '$$2=="normal"' | cut -f 4); \
	${strelka}/configureStrelkaSomaticWorkflow.py \
	--normalBam $${NORM} --tumorBam $${TUMOR} \
	--referenceFasta ${ref_DNA} --indelCandidates $^ \
	--runDir samples/$*/mutations/strelka; \
	${python} samples/$*/mutations/strelka/runWorkflow.py -m local -j 2 -g 20

# ------------------------------------------------------------------------------
# unzip strelka snv/indels
# ------------------------------------------------------------------------------
samples/%/mutations/strelka/snvs.vcf : \
samples/%/mutations/strelka/results/variants/somatic.snvs.vcf.gz
	gunzip -c samples/$*/mutations/strelka/results/variants/somatic.snvs.vcf.gz > $@; \
	gunzip -c samples/$*/mutations/strelka/results/variants/somatic.indels.vcf.gz > \
	samples/$*/mutations/strelka/indels.vcf

# ------------------------------------------------------------------------------
# annotate strelka snv/indels with snpEFF
# ------------------------------------------------------------------------------
samples/%/mutations/strelka/snvs.annotated.vcf: samples/%/mutations/strelka/snvs.vcf
	grep "${HASH}" samples/$*/mutations/strelka/snvs.vcf > samples/$*/header.tmp
	grep -v "${HASH}" samples/$*/mutations/strelka/snvs.vcf | awk '$$7 == "PASS"' | \
	cat samples/$*/header.tmp - > samples/$*/tmp.vcf
	${java} -Xmx10g -jar ${snpEff}/snpEff.jar -c \
	${snpEff}/snpEff.config -v GRCh37.75 -canon -no-downstream \
	-no-upstream -noLog -noStats -no-intergenic samples/$*/tmp.vcf > $@
	rm samples/$*/header.tmp samples/$*/tmp.vcf

samples/%/mutations/strelka/indels.annotated.vcf : samples/%/mutations/strelka/snvs.annotated.vcf
	grep "${HASH}" samples/$*/mutations/strelka/indels.vcf > samples/$*/header.tmp
	grep -v "${HASH}" samples/$*/mutations/strelka/indels.vcf | awk '$$7 == "PASS"' | \
	cat samples/$*/header.tmp - > samples/$*/tmp.vcf
	${java} -Xmx10g -jar ${snpEff}/snpEff.jar -c \
	${snpEff}/snpEff.config -v GRCh37.75 -canon -no-downstream \
	-no-upstream -noLog -noStats -no-intergenic samples/$*/tmp.vcf > $@
	rm samples/$*/header.tmp samples/$*/tmp.vcf

# ------------------------------------------------------------------------------
# all of hg19 bins (20kb) to copy status
# ------------------------------------------------------------------------------
samples/%/cnv/hg19_all_cnvbins.bed :
	cat samples/$*/cnv/*_segs*bed | awk '{gsub("23","X",$$1);print}' | \
	tr ' ' '\t' | ${bedops}/sort-bed --tmpdir ./tmp - > samples/$*/cnv/tmp.bed; \
	NCOL=$$(awk '{print (NF+5)}' samples/$*/cnv/tmp.bed | head -1); \
	${bedtools}/intersectBed -wao -a data/hg19_all_windows.bed \
	-b samples/$*/cnv/tmp.bed | sort -k4,4 -k$${NCOL},$${NCOL}nr | sort -k4,4 -u > $@; \
	rm samples/$*/cnv/tmp.bed

# RNAseq read depth (# read centers) for each bin
samples/%/cnv/cnvbin_RNAcov.bed :
	mkdir samples/$*/tmp1 samples/$*/tmp2; \
	${bedops}/convert2bed --max-mem=125G --sort-tmpdir=samples/$*/tmp1 \
	--input=bam < samples/$*/rnaseq/gsc.bam | awk '$$9=="="' | \
	awk '$$11 < 10000 && $$11 > -10000' | cut -f 1-3 | \
	awk '{printf("${PERCENT}s\t${PERCENT}i\n",$$1, ((($$3 - $$2)/2) + \
	$$2))}' | awk '{print $$1"\t"$$2"\t"$$2 + 1}' | \
	${bedops}/sort-bed --max-mem 125G --tmpdir samples/$*/tmp2 - | \
	${bedtools}/coverageBed -a data/hg19_all_windows.bed -b - -counts > $@; \
	rmdir samples/$*/tmp1 samples/$*/tmp2

# map each bin to SNVs
samples/%/cnv/cnvbin_to_SNV.bed :
	mkdir samples/$*/tmp1; \
	cat samples/$*/mutations/strelka/indels.annotated.vcf | \
	cat samples/$*/mutations/strelka/snvs.annotated.vcf - | \
	grep -v "^${HASH}" | awk '{print $$1, $$2, $$2+1, $$8}' | tr ' ' '\t' | \
	awk '{gsub("\\|\\|\\|\\|\\|.*", "");print}' | \
	${bedops}/sort-bed --max-mem 125G --tmpdir samples/$*/tmp1 - \
	> samples/$*/cnv/tmp.bed; \
	${bedtools}/intersectBed -wao -a data/hg19_all_windows.bed \
	-b samples/$*/cnv/tmp.bed > $@; \
	rmdir samples/$*/tmp1; rm samples/$*/cnv/tmp.bed

